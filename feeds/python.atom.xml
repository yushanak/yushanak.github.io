<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>廋虎</title><link href="http://yushanak.github.io/" rel="alternate"></link><link href="http://yushanak.github.io/feeds/python.atom.xml" rel="self"></link><id>http://yushanak.github.io/</id><updated>2014-09-25T00:00:00+08:00</updated><entry><title>OOP 学习笔记</title><link href="http://yushanak.github.io/python-oo-dev.html" rel="alternate"></link><updated>2014-09-25T00:00:00+08:00</updated><author><name>Shan</name></author><id>tag:yushanak.github.io,2014-09-24:python-oo-dev.html</id><summary type="html">&lt;h2&gt;为何使用类：&lt;/h2&gt;
&lt;p&gt;使用类不仅仅是为了代码重用，它提供了描述现实世界问题结构和它们之间关系的非常有用的模型。包括两个方面：继承和组合。&lt;/p&gt;
&lt;p&gt;我们的知识很大一部分是建立在分类的层次结构之上：将现实世界按各种规则分门别类的分解剖析。掌握之后又通过各种需要组合起来，反过来进一步理解这个世界，产生我们的智慧。&lt;/p&gt;
&lt;h3&gt;具体到类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;它是一种定义新种类的方式。&lt;/li&gt;
&lt;li&gt;从程序设计角度看，它又和函数和模块相似——是封装逻辑和数据的另一种方式。&lt;/li&gt;
&lt;li&gt;同时类也定义新的命名空间，这点和模块很像。&lt;/li&gt;
&lt;li&gt;它有和其它程序组成单元相比有三个显著的特点：&lt;ul&gt;
&lt;li&gt;多重实例：类好比是有个模具，每次调用类都会建立一个有自己命名空间的新对象，这个对象能够读取类的属性，并有自己的命名空间来存储自己的数据。&lt;/li&gt;
&lt;li&gt;继承：通过继承机制，类建立命名空间的层次结构，可以在这个层次结构中重新定义类的属性从而扩展类。&lt;/li&gt;
&lt;li&gt;运算符重载：类通过特定的协议方法，可以定义对象来响应内置类型上的几种运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比C++和Java，Python 的OOP得到了简化。在Python中大多数OOP都可以简化为一个表达式：object.attribute。
当我们使用object.attribute这个表达式读取类的属性，调用对象的方法时，会产生一个动作——启动搜索对象连接树：从下到上，从左到右地搜索对象树，找到这个attribute首次出现的对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;也就是说，取出一个属性就是简单地搜索一颗“树”。这个搜索过程（机制）就是称为：继承。&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;搜索是从下到上的，所以在树中位置较低的对象就重写了位置较高对象的相同属性。这个就是继承和重载的关键点。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python 对象模型中，类和通过类产生的实例是两种不同的对象类型。每种类型的主要用途都是用来作为另一个类型的命名空间。&lt;/p&gt;
&lt;p&gt;当你调用类创建一个实例时发生的：i=C() 实际执行的是 C.&lt;strong&gt;init&lt;/strong&gt;(i); 当调用类的方法时 i.w()，实际执行的是 C.w(i)。（调用 C 类的 w 方法函数处理 i）&lt;/p&gt;
&lt;p&gt;也就是说，每当我们调用类的方法时，总会隐含这个类的实例，Python 会把隐含的实例传进方法中的第一个特殊的参数，一般称之为 self。所以方法可以通过两种形式调用：i.w() 或者 C.w(i)。后一种方式实际上是你自己手工完成了搜索继承链和传入对象实例执行方法函数这两个步骤。&lt;/p&gt;
&lt;h3&gt;小结&lt;/h3&gt;
&lt;p&gt;Python的OO内容差不多就是：关于self的一个参数，和查找连接对象树中的属性，我们将这种查找称之为继承搜索。这种功能（搜索机制）可以让我们通过定制代码，合理使用可以大幅提高我们的编码效率。&lt;/p&gt;</summary><category term="OOP"></category><category term="Python"></category></entry><entry><title>Django1.7 新增 Migrations 功能</title><link href="http://yushanak.github.io/django-migrantions.html" rel="alternate"></link><updated>2014-09-03T00:00:00+08:00</updated><author><name>Shan</name></author><id>tag:yushanak.github.io,2014-09-03:django-migrantions.html</id><summary type="html">&lt;p&gt;&lt;em&gt;本文是学习Django文档的一个概要，详细内容请阅读 &lt;a href="https://docs.djangoproject.com/en/1.7/topics/migrations/"&gt;Django文档原文&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Django 1.7主要改进内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个新的内置数据库迁移系统&lt;/li&gt;
&lt;li&gt;Django 应用的一个重构概念&lt;/li&gt;
&lt;li&gt;改进了 Field API 模块，支持迁移，未来将会启用简单的组合键，支持 Django's ORM&lt;/li&gt;
&lt;li&gt;改进了可定制的 Manager 和 QuerySet 类&lt;/li&gt;
&lt;li&gt;一个可扩展的系统检测框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多内容请看发行说明。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;在Django 1.7 以前，Django 只支持添加新模型到数据库。syncdb命令（migrate命令的前身）不提供删除或更改现有的数据库结构的功能。&lt;/p&gt;
&lt;p&gt;从 Django 1.7 开始，Django 将提供一种在你修改你的数据库结构（添加字段或删除表等）后进行数据库迁移的方法，它们大多设计成自动运行，但是你需要知道该什么时候迁移,在什么时候运行它们,以及运行中你可能遇到的常见问题。&lt;/p&gt;
&lt;h2&gt;工具&lt;/h2&gt;
&lt;p&gt;下面提供的数据库迁移方面的几个命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;migrate，负责应用迁移，执行迁移动作，更新数据库。&lt;/li&gt;
&lt;li&gt;makemigrations，负责在你修改的数据模型的基础上构建新的迁移，也就是说将你的更改单独打包到迁移文件。类似于提交的动作。&lt;/li&gt;
&lt;li&gt;sqlmigrae，负责打印出迁移的SQL语句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 迁移是基于每一个应用级别进行的。并且有些应用是不能迁移的。你可以将它类比于一个版本控制系统（GIT）。&lt;/p&gt;
&lt;h2&gt;支持的数据库后台：&lt;/h2&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;p&gt;PostgreSQL是所有支持的数据库中最容易迁移的，唯一的提示是使用默认值添加一个列将会导致整个表的重写，耗费的时间将与它的大小成正比。建议你添加新列时将列的 null=true 打开这样将加快迁移的速度。&lt;/p&gt;
&lt;h3&gt;MySQL&lt;/h3&gt;
&lt;p&gt;MySql缺乏支持变更的操作，这意味着如果迁移失败，你将需要手工执行回滚以便再次尝试。此外，无论是添加或删除列，Mysql几乎会重新整个表，这在一些低档硬件平台将会导致长时间的数据库锁定。&lt;/p&gt;
&lt;h3&gt;SQLite&lt;/h3&gt;
&lt;p&gt;SQLite 很少的变更支持，所以django通过以下方式实现：
&lt;em&gt; 使用新数据结构建立一张新表
&lt;/em&gt; 拷贝数据到新表
&lt;em&gt; 删除旧表
&lt;/em&gt; 将新表改回到原来的名字&lt;/p&gt;
&lt;p&gt;这种方式效果还不错，但是执行很慢而且偶尔还会出错。不建议您在生产环境中运行和迁移SQLite,除非你非常了解风险和其局限性。这个一般是使用在开发环境。&lt;/p&gt;
&lt;h2&gt;工作流&lt;/h2&gt;
&lt;p&gt;迁移工具的使用很简单，更改你的数据模型后，使用 &lt;strong&gt;makemigrations&lt;/strong&gt; 命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;makemigrations&lt;/span&gt;
&lt;span class="n"&gt;Migrations&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="mo"&gt;0003&lt;/span&gt;&lt;span class="n"&gt;_auto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Alter&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在此过程中，将会扫描你的模型比较前后的变化，新建一组迁移文件，你需要仔细检查自动产生的迁移是否是你预期的结果，特别是在发生复杂的数据模型变动之后。&lt;/p&gt;
&lt;p&gt;一旦你的迁移文件建成之后，你需要将结构改变应用到你的数据库中，确保是你预期的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;span class="n"&gt;Operations&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Synchronize&lt;/span&gt; &lt;span class="n"&gt;unmigrated&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;staticfiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contenttypes&lt;/span&gt;
    &lt;span class="n"&gt;Apply&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;
&lt;span class="n"&gt;Synchronizing&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Creating&lt;/span&gt; &lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;SQL&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;indexes&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Installed&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Applying&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="mf"&gt;.0003&lt;/span&gt;&lt;span class="n"&gt;_auto&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;依赖&lt;/h2&gt;
&lt;h2&gt;迁移文件&lt;/h2&gt;</summary><category term="Django"></category><category term="Python"></category></entry><entry><title>Jinja2 笔记（一）</title><link href="http://yushanak.github.io/Jinjia2-how-to-1.html" rel="alternate"></link><updated>2014-09-13T15:30:00+08:00</updated><author><name>Shan</name></author><id>tag:yushanak.github.io,2014-03-13:Jinjia2-how-to-1.html</id><summary type="html">&lt;p&gt;Jinjin2 通用模板语言，类似于 Django 的模板，但更加灵活和快速。Jinja2 需要至少 Python 2.4 版本来运行。&lt;/p&gt;
&lt;h3&gt;Jinjia2 模板引擎中的语法和语义结构&lt;/h3&gt;
&lt;p&gt;模板仅仅是文本文件。它可以生成任何基于文本的格式（HTML、XML、CSV、LaTex 等等）。 它并没有特定的扩展名， .html 或 .xml 都可以。
模板包括：&lt;strong&gt;变量&lt;/strong&gt;、 &lt;strong&gt;表达式&lt;/strong&gt; 和 &lt;strong&gt;tags&lt;/strong&gt;。语法灵感主要来自于 Django 和 Python 。{% %}用来执行语句， {{ }}用来返回一个变量的值。&lt;/p&gt;
&lt;h3&gt;变量&lt;/h3&gt;
&lt;p&gt;变量是由你的 app 传递进模板来的。它可能有属性或者元素，这完全取决于你传递进来的是什么类型的变量。&lt;/p&gt;</summary><category term="Jinjia2"></category><category term="Python"></category></entry></feed>